Store Data with Sass Variables

One feature of Sass that's different than CSS is it uses variables. They are declared
 and set to store data, similar to JavaScript.

In JavaScript, variables are defined using the let and const keywords. In Sass, 
variables start with a $ followed by the variable name.

Here are a couple examples:

$main-fonts: Arial, sans-serif;
$headings-color: green;

And to use the variables:

h1 {
  font-family: $main-fonts;
  color: $headings-color;
}

One example where variables are useful is when a number of elements need to be the
 same color. If that color is changed, the only place to edit the code is the variable value.




Sass allows nesting of CSS rules, which is a useful way of organizing a style sheet.

Normally, each element is targeted on a different line to style it, like so:

article {
  height: 200px;
}

article p {
  color: white;
}

article ul {
  color: blue;
}

For a large project, the CSS file will have many lines and rules. This is where nesting can help 
organize your code by placing child style rules within the respective parent elements:

article {
  height: 200px;

  p {
    color: white;
  }

  ul {
    color: blue;
  }
}




In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.

Newer CSS features take time before they are fully adopted and ready to use in all browsers. As 
features are added to browsers, CSS rules using them may need vendor prefixes. Consider box-shadow:

div {
  -webkit-box-shadow: 0px 0px 4px #fff;
  -moz-box-shadow: 0px 0px 4px #fff;
  -ms-box-shadow: 0px 0px 4px #fff;
  box-shadow: 0px 0px 4px #fff;
}

It's a lot of typing to re-write this rule for all the elements that have a box-shadow, or to change
 each value to test different effects. Mixins are like functions for CSS. Here is how to write one:

@mixin box-shadow($x, $y, $blur, $c){ 
  -webkit-box-shadow: $x $y $blur $c;
  -moz-box-shadow: $x $y $blur $c;
  -ms-box-shadow: $x $y $blur $c;
  box-shadow: $x $y $blur $c;
}

The definition starts with @mixin followed by a custom name. The parameters (the $x, $y, $blur, and $c
 in the example above) are optional. Now any time a box-shadow rule is needed, only a single line calling 
 the mixin replaces having to type all the vendor prefixes. A mixin is called with the @include directive:

div {
  @include box-shadow(0px, 0px, 4px, #fff);
}



Use @if and @else to Add Logic To Your Styles

The @if directive in Sass is useful to test for a specific case - it works just like the if statement in JavaScript.

@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}

And just like in JavaScript, the @else if and @else directives test for more conditions:

@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}




The @for directive adds styles in a loop, very similar to a for loop in JavaScript.

@for is used in two ways: "start through end" or "start to end". The main difference is 
that the "start to end" excludes the end number as part of the count, and "start through end" 
includes the end number as part of the count.

Here's a start through end example:

@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}

The #{$i} part is the syntax to combine a variable (i) with text to make a string. When the Sass 
file is converted to CSS, it looks like this:

.col-1 {
  width: 8.33333%;
}

.col-2 {
  width: 16.66667%;
}

...

.col-12 {
  width: 100%;
}

This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.

    Front End Development Libraries
    SASS

Use @each to Map Over Items in a List

The last challenge showed how the @for directive uses a starting and ending value to loop a certain 
number of times. Sass also offers the @each directive which loops over each item in a list or map. 
On each iteration, the variable gets assigned to the current value from the list or map.

@each $color in blue, red, green {
  .#{$color}-text {color: $color;}
}

A map has slightly different syntax. Here's an example:

$colors: (color1: blue, color2: red, color3: green);

@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}

Note that the $key variable is needed to reference the keys in the map. Otherwise, the compiled CSS
 would have color1, color2... in it. Both of the above code examples are converted into the following CSS:

.blue-text {
  color: blue;
}

.red-text {
  color: red;
}

.green-text {
  color: green;
}

Write an @each directive that goes through a list: blue, black, red and assigns each variable to a 
.color-bg class, where the color part changes for each item to the respective color. Each class should
 set the background-color to the respective color as well.

 Apply a Style Until a Condition is Met with @while

The @while directive is an option with similar functionality to the JavaScript while loop. It creates CSS rules until a condition is met.

The @for challenge gave an example to create a simple grid system. This can also work with @while.

$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}

First, define a variable $x and set it to 1. Next, use the @while directive to create the grid 
system while $x is less than 13. After setting the CSS rule for width, $x is incremented by 1
 to avoid an infinite loop.

Use @while to create a series of classes with dif



Split Your Styles into Smaller Chunks with Partials

Partials in Sass are separate files that hold segments of CSS code. These are
 imported and used in other Sass files. This is a great way to group similar code
  into a module to keep it organized.

Names for partials start with the underscore (_) character, which tells Sass it is a
 small segment of CSS and not to convert it into a CSS file. Also, Sass files end with
  the .scss file extension. To bring the code in the partial into another Sass file, use the @import directive.

For example, if all your mixins are saved in a partial named "_mixins.scss", and they are
 needed in the "main.scss" file, this is how to use them in the main file:

@import 'mixins'

Note that the underscore and file extension are not needed in the import statement - Sass
 understands it is a partial. Once a partial is imported into a file, all variables, mixins,
  and other code are available to use.



  SASS (Syntactically Awesome Style Sheets) is a CSS preprocessor that adds power
   and elegance to the basic language, making it more efficient and manageable. 
   SASS allows you to use features that don't exist in CSS, such as variables, nested
    rules, mixins, functions, and more, which help in writing clean, easy-to-maintain, 
    and reusable CSS. Hereâ€™s a detailed breakdown of SASS, its features, and how it works:

### Core Concepts of SASS

1. **Variables**
2. **Nesting**
3. **Partials and Import**
4. **Mixins**
5. **Inheritance (Extend)**
6. **Operators**
7. **Functions**
8. **Control Directives**
9. **Comments**

### 1. Variables

Variables in SASS allow you to store values (such as colors, fonts, or any CSS
 value) that you can reuse throughout your stylesheet. Variables make it easy to
  manage and update your code.

```scss
$primary-color: #3498db;
$font-stack: Helvetica, sans-serif;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
```

### 2. Nesting

Nesting in SASS allows you to nest your CSS selectors in a way that
 follows the same visual hierarchy of your HTML. This makes your CSS 
 more readable and easier to maintain.

```scss
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { 
    display: inline-block; 
  }

  a {
    text-decoration: none;
    color: $primary-color;
  }
}
```

### 3. Partials and Import

Partials are smaller SASS files that you can include in other SASS
 files. They are useful for organizing your CSS into modular pieces. 
 The `@import` directive is used to include the content of one file 
 into another.

```scss
// _reset.scss
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

// styles.scss
@import 'reset';

body {
  font: 100% $font-stack;
  color: $primary-color;
}
```

### 4. Mixins

Mixins are reusable pieces of code that you can include in other selectors.
 They allow you to avoid repetitive code and keep your styles DRY
  (Don't Repeat Yourself).

```scss
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

.box { 
  @include border-radius(10px); 
}
```

### 5. Inheritance (Extend)

Inheritance allows one selector to inherit the styles of another. This is
 useful when you have a base style that you want to extend to multiple selectors.

```scss
.message {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  @extend .message;
  border-color: green;
}

.error {
  @extend .message;
  border-color: red;
}
```

### 6. Operators

SASS supports mathematical operations on values, making it easier to manipulate CSS values dynamically.

```scss
.container {
  width: 100% / 3;
  margin: 10px + 5px;
  padding: 15px * 2;
}
```

### 7. Functions

SASS functions allow you to create reusable chunks of code that return a
 value. SASS has many built-in functions and you can also define your own.

```scss
@function calculate-rem($size-px) {
  @return $size-px / 16px * 1rem;
}

body {
  font-size: calculate-rem(16px);
}
```

### 8. Control Directives

Control directives in SASS, like `@if`, `@for`, `@each`, and `@while`, allow
 you to add logic to your stylesheets.

```scss
@mixin theme-colors($theme) {
  @if $theme == light {
    background-color: white;
    color: black;
  } @else if $theme == dark {
    background-color: black;
    color: white;
  }
}

body {
  @include theme-colors(dark);
}
```

### 9. Comments

SASS supports both single-line and multi-line comments. Single-line comments
 are removed in the compiled CSS, while multi-line comments can be preserved.

```scss
// This is a single-line comment

/* This is a multi-line comment that will be preserved in the compiled CSS */
```

### Example Workflow with SASS

To use SASS, you typically follow these steps:

1. **Install SASS**: You can install SASS globally on your machine using npm or 
another package manager.

```sh
npm install -g sass
```

2. **Write SASS Files**: Create SASS files (`.scss` or `.sass`).

```scss
// _variables.scss
$primary-color: #3498db;
$font-stack: Helvetica, sans-serif;

// _mixins.scss
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// styles.scss
@import 'variables';
@import 'mixins';

body {
  font: 100% $font-stack;
  color: $primary-color;
  .box {
    @include border-radius(10px);
  }
}
```

3. **Compile SASS to CSS**: Use the SASS compiler to convert your SASS files into CSS.

```sh
sass styles.scss styles.css
```

4. **Include CSS in Your Project**: Link the compiled CSS file in your HTML.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="box">Hello, SASS!</div>
</body>
</html>
```

### Summary

- **Variables**: Store reusable values.
- **Nesting**: Organize CSS hierarchically.
- **Partials and Import**: Modularize your CSS.
- **Mixins**: Create reusable blocks of code.
- **Inheritance (Extend)**: Inherit styles from other selectors.
- **Operators**: Perform mathematical operations.
- **Functions**: Create reusable code that returns a value.
- **Control Directives**: Add logic to your stylesheets.
- **Comments**: Document your code.

SASS enhances CSS by adding powerful features that make it more efficient
 to write and maintain stylesheets. It helps keep your CSS organized, reusable, 
 and scalable.



